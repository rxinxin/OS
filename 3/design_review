
Page table + Page Faults (2 points)
Explain how virtual addresses are translated to physical addresses on i386. When are page faults triggered? How are you going to figure out what address a fault occurred on?

Virtual addresses are translated to physical addresses using a two-layer lookup into a page directory and a page table.

When a process looks up an address that doesn't resolve to a page in physical memory. Available bit is 0.

pcb->fault_addr



Page Map (1 point)
You're going to need a data structure to track information about pages. What information should you track?

/* TODO: Structure of an entry in the page map */
typedef struct {
  node_t node; // for queues
  uint32_t vaddr;  // virtual address of start of page
  uint32_t swap_loc;  // location to swap out to on disk
  swap_size?? May need to swap more than one page's worth of data (is it in bits or # of pages)
  bool_t is_pinned;
  bool_t is_available;
  bool_t is_dirty; // if true, write to disk before evicting from memory
  bool_t is_thread; // is this a kernel thread?
  int pid; // owner of page (-1 for kernel threads)
  uint32_t index; // index within the page_map array
  uint32_t *mem_addr; // location of page on physical memory
} page_map_entry_t;

Calling Relationships (2 point)
For the functions page_alloc, page_swap_in, page_swap_out, and page_fault_handler, please describe the caller-callee relationship graph. 

page_fault_handler -> page_alloc     -> page_replacement_policy -> page_swap_in
                                     -> page_swap_out



alias threehourpw='git config --global credential.helper '"'"'cache --timeout=10800'"'"' '

when is dirty bit set?
sync primitives for page fault handler

do pinned pages get unpinned when a process exits?